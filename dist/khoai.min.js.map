{"version":3,"sources":["khoai.min.js"],"names":["root","factory","define","amd","Khoai","this","proxyCounter","Object","defineProperty","value","BaseClass","proxiedMethods","getProxyCounter","prototype","dispose","key","hasOwnProperty","proxy","method","undefined","khoaiProxyId","bind","baseClass","_","get_unique_id_with_prefix","type","id","type_as_prefix","isUndefined","is_diff_strict_cb","value_1","value_2","is_diff_loose_cb","diff_object","cb","object","others","arguments","length","result","isFunction","Util","mergeObject","apply","slice","call","each","createConsoleCB","name","description","console","concat","sortNumberCallback","a","b","sortNumberDescCallback","Array","sliceArguments","args","start","end","beNumber","default_value","parseFloat","isNumeric","beObject","isObject","isArray","isArguments","zipObject","keys","0","obj","cast_types","Boolean","Math","floor","castArray","castItemsType","Error","map","clone","mapObject","loop","callback","break_on","i","unique_id_current_status","nextID","isEmpty","currentID","resetID","String","max","className","constructor_only","constructor","toString","contentType","content","class_name","isInstanceOf","isPrimitiveType","next_index","range","extend","diffObject","flatten","toArray","unshift","diffObjectLoose","diffObjectWith","randomString","chars","chars_length","round","random","setup","option","val","path","set","validKeys","push","pairsAsObject","field_key","field_value","item","pluckBy","collection","key_field","value_field","oneOf","values","indexOf","first","escapeURL","url","param","encodeURIComponent","encodeURI","unescapeURL","decodeURI","decodeURIComponent","chunks","array","chunk","ceil","toggle","elements","status","uniq","exclude","intersection","include","difference","union","defineObject","properties","trim","has","enumerable","defineConstant","target","toUpperCase","inherit","subclass_constructor","base_class_constructor","addSuper","proto","create","_super","callFunc","context","isString","window","this_func","callee","tmpFunc","async","delay","parseInt","isNaN","setTimeout","logArgs","log","logCb","warnArgs","warn","warnCb","errorArgs","error","errorCb","debug_types_status","all_debugging","isDebugging","debugging","debugComplete","onDebugging","getDebugString","details","glue","JSON","stringify","join","optionalArgs","order","rules","arg","missing_rules","args_cloned","args_with_type","found","index","forEach","missing","arg_name","shift","tmp_arg","tmp_type","types","SORT_NUMBER","SORT_NUMBER_DESC","util"],"mappings":"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","file":"khoai.min.js","sourcesContent":["(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([], function(){\r\n            return (root.Khoai = factory());\r\n        });\r\n    } else {\r\n        // Browser globals\r\n        root.Khoai = factory();\r\n    }\r\n}(this, function () {\r\n    \"use strict\";\r\n\r\n    var Khoai = {};\r\n    var proxyCounter = 0;\r\n\r\n    /**\r\n     * Khoai's version\r\n     * @constant {string} VERSION\r\n     * @default\r\n     */\r\n    var version = '0.0.1';\r\n\r\n\r\n    Object.defineProperty(Khoai, 'VERSION', {\r\n        value: version\r\n    });\r\n\r\n    var BaseClass = function () {\r\n        this.proxiedMethods = {}\r\n    };\r\n\r\n\r\n    /**\r\n     *\r\n     * @return {number}\r\n     */\r\n    Khoai.getProxyCounter = function () {\r\n        return proxyCounter;\r\n    };\r\n\r\n    BaseClass.prototype.dispose = function () {\r\n        for (var key in this.proxiedMethods) {\r\n            if (this.proxiedMethods.hasOwnProperty(key)) {\r\n                this.proxiedMethods[key] = null\r\n            }\r\n        }\r\n\r\n        this.proxiedMethods = {}\r\n    };\r\n\r\n    /*\r\n     * Creates a proxied method reference or returns an existing proxied method.\r\n     */\r\n    BaseClass.prototype.proxy = function (method) {\r\n        if (method.khoaiProxyId === undefined) {\r\n            proxyCounter++;\r\n            method.khoaiProxyId = proxyCounter\r\n        }\r\n\r\n        if (this.proxiedMethods[method.khoaiProxyId] !== undefined)\r\n            return this.proxiedMethods[method.khoaiProxyId];\r\n\r\n        this.proxiedMethods[method.khoaiProxyId] = method.bind(this);\r\n\r\n        return this.proxiedMethods[method.khoaiProxyId]\r\n    };\r\n\r\n    Khoai.baseClass = BaseClass;\r\n\r\n    return Khoai;\r\n}));\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(['lodash', 'khoai'], function (_, Khoai) {\r\n            factory(_, Khoai);\r\n        });\r\n    } else {\r\n        factory(root._, root.Khoai)\r\n    }\r\n}(this, function (_, Khoai) {\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Type Definitions\r\n     |--------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n     * Loop callback. Useful in _.each, _.map, _.omit,...\r\n     * @callback loopCallback\r\n     * @param value Item value\r\n     * @param key Item name/index\r\n     * @param object object of items\r\n     *\r\n     * @see http://underscorejs.org/#each\r\n     * @see http://underscorejs.org/#map\r\n     * @see http://underscorejs.org/#omit\r\n     *\r\n     * @example <caption>Alerts each number value in turn...</caption>\r\n     * _.each([1, 2, 3], alert);\r\n     * _.each({one: 1, two: 2, three: 3}, alert);\r\n     * @example <caption>Log to console each number value in turn...</caption>\r\n     * var logger = function(item, key, object){\r\n     *  console.log(key, '=>', item, '<------ Object', object);\r\n     * };\r\n     * _.each([1, 2, 3], logger);\r\n     * _.each({one: 1, two: 2, three: 3}, logger);\r\n     *\r\n     */\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Core\r\n     |--------------------------------------------------------------------------\r\n     */\r\n\r\n\r\n    var Util = {};\r\n    var slice = Array.prototype.slice;\r\n\r\n    /**\r\n     * Slice arguments of a function as array\r\n     * @param args\r\n     * @param {Number} [start]\r\n     * @param {Number} [end]\r\n     * @return {*}\r\n     */\r\n    Util.sliceArguments = function (args, start, end) {\r\n        return slice.apply(args, slice.call(arguments, 1));\r\n    };\r\n\r\n    Util.beNumber = function (value, default_value) {\r\n        value = parseFloat(value);\r\n\r\n        if (Util.isNumeric(value)) {\r\n            return value;\r\n        }\r\n        if (_.isUndefined(default_value)) {\r\n            return 0;\r\n        }\r\n\r\n        return Util.isNumeric(default_value) ? parseFloat(default_value) : Util.beNumber(default_value, 0);\r\n    };\r\n\r\n    /**\r\n     * Make sure first argument is object or arguments are name and value of object\r\n     * @param {*} [name]\r\n     * @param {*} [value]\r\n     * @returns {*}\r\n     * @example\r\n     * Khoai.util.beObject(); //{}\r\n     * Khoai.util.beObject(['foo', 'bar', 123]); //{0: \"a\", 1: 'bar', 2: 123}\r\n     * Khoai.util.beObject('yahoo'); //{0: \"yahoo\"}\r\n     * Khoai.util.beObject(235); //{0: 235}\r\n     * Khoai.util.beObject('yahoo', 123); //{yahoo: 123}\r\n     * Khoai.util.beObject({yahoo: 123, goooo:'ASDWd'}); //{yahoo: 123, goooo:'ASDWd'}\r\n     *\r\n     */\r\n    Util.beObject = function (name, value) {\r\n        switch (true) {\r\n            case arguments.length == 1:\r\n                if (_.isObject(name)) {\r\n                    return name;\r\n                } else if (_.isArray(name) || _.isArguments(name)) {\r\n                    return _.zipObject(Object.keys(name), name);\r\n                }\r\n\r\n                return {0: name};\r\n                break;\r\n\r\n            case arguments.length >= 2:\r\n                if (_.isObject(name)) {\r\n                    return name;\r\n                }\r\n                var obj = {};\r\n\r\n                obj[name] = value;\r\n\r\n                return obj;\r\n        }\r\n\r\n        return {};\r\n    };\r\n\r\n    var cast_types = {};\r\n\r\n    cast_types['string'] = function (value) {\r\n        return value + '';\r\n    };\r\n    cast_types['boolean'] = function (value) {\r\n        return Boolean(value);\r\n    };\r\n\r\n    cast_types['number'] = function (value) {\r\n        return Util.beNumber(value);\r\n    };\r\n    cast_types['integer'] = function (value) {\r\n        return Math.floor(Util.beNumber(value));\r\n    };\r\n    cast_types['array'] = _.castArray;\r\n    cast_types['object'] = function (value) {\r\n        return Util.beObject(value);\r\n    };\r\n\r\n    /**\r\n     * Convert array|object item to other type. Support types:\r\n     * - string\r\n     * - boolean\r\n     * - number\r\n     * - integer\r\n     * - array\r\n     * - object\r\n     *\r\n     * @param object\r\n     * @param type\r\n     * @return {Array|object}\r\n     * @throws Error when cast type is unsupported\r\n     */\r\n    Util.castItemsType = function (object, type) {\r\n        if (!cast_types.hasOwnProperty(type)) {\r\n            throw new Error('Invalid cast type. Available types are: string, number, integer, array and object');\r\n        }\r\n        if (_.isArray(object)) {\r\n            return _.map(_.clone(object), cast_types[type]);\r\n        }\r\n\r\n        return _.mapObject(_.clone(object), cast_types[type]);\r\n    };\r\n\r\n    /**\r\n     * Loop over array or object like _.each but breakable\r\n     * @param {object|Array} obj Loop object\r\n     * @param {loopCallback} callback callback apply on every item, return break value to break the loop\r\n     * @param {string} [break_on=break] Value of callback result that break the loop, default is 'break'\r\n     * @returns {*}\r\n     * @example\r\n     * Khoai.util.loop([1,2,3,4,5], function(item){\r\n     *  console.log('Number', item);\r\n     *  if(item > 3){\r\n     *      return 'break';\r\n     *  }\r\n     * });\r\n     * //Console will log:\r\n     * // Number 1\r\n     * // Number 2\r\n     * // Number 3\r\n     *  @example\r\n     * Khoai.util.loop([1,2,3,4,5], function(item){\r\n     *  console.log('Number', item);\r\n     *  if(item > 3){\r\n     *      return 'yahoo';\r\n     *  }\r\n     * }, 'yahoo');\r\n     * //Console will log:\r\n     * // Number 1\r\n     * // Number 2\r\n     * // Number 3\r\n     *\r\n     */\r\n    Util.loop = function (obj, callback, break_on) {\r\n        var i, length;\r\n        if (_.isUndefined(break_on)) {\r\n            break_on = 'break';\r\n        }\r\n        if (_.isArray(obj)) {\r\n            for (i = 0, length = obj.length; i < length; i++) {\r\n                if (callback(obj[i], i, obj) === break_on) {\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            var keys = _.keys(obj);\r\n            for (i = 0, length = keys.length; i < length; i++) {\r\n                if (callback(obj[keys[i]], keys[i], obj) === break_on) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return obj;\r\n    };\r\n\r\n    var unique_id_current_status = {};\r\n\r\n    /**\r\n     * Return Next ID of type, start from 1\r\n     * @param {string} [type=\"unique_id\"] Type of ID\r\n     * @param {boolean} [type_as_prefix = true]  Use type as prefix of return ID\r\n     * @returns {string|number}\r\n     * @example <caption>Default type</caption>\r\n     * Khoai.util.nextID(); //unique_id_1\r\n     * Khoai.util.nextID(); //unique_id_2\r\n     * Khoai.util.nextID(null, false); //3\r\n     * Khoai.util.nextID('superman'); //superman_1\r\n     * Khoai.util.nextID('superman'); //superman_2\r\n     * Khoai.util.nextID(); //unique_id_4\r\n     * Khoai.util.nextID('superman', false); //3\r\n     *\r\n     */\r\n    Util.nextID = function (type, type_as_prefix) {\r\n        if (_.isEmpty(type)) {\r\n            type = 'unique_id';\r\n        }\r\n        if (!unique_id_current_status.hasOwnProperty(type)) {\r\n            unique_id_current_status[type] = 1;\r\n        } else {\r\n            unique_id_current_status[type]++;\r\n        }\r\n\r\n        return get_unique_id_with_prefix(type, unique_id_current_status[type], type_as_prefix);\r\n    };\r\n\r\n    /**\r\n     * Return current ID of type\r\n     * @param {string} [type=\"unique_id\"] Type of ID\r\n     * @param {boolean} [type_as_prefix = true] Use type as prefix of return ID\r\n     * @returns {boolean|string|number}\r\n     * @example\r\n     * Khoai.util.currentID(); //false\r\n     * Khoai.util.nextID(); //unique_id_0\r\n     * Khoai.util.nextID(); //unique_id_1\r\n     * Khoai.util.currentID(); //unique_id_1\r\n     * Khoai.util.currentID(null, false); //1\r\n     * Khoai.util.currentID('superman'); //false\r\n     * Khoai.util.nextID('superman'); //superman_0\r\n     * Khoai.util.nextID('superman'); //superman_1\r\n     * Khoai.util.currentID('superman'); //superman_1\r\n     * Khoai.util.currentID('superman', false); //1\r\n     * Khoai.util.nextID(); //2\r\n     * Khoai.util.currentID(); //unique_id_2\r\n     */\r\n    Util.currentID = function (type, type_as_prefix) {\r\n        if (_.isEmpty(type)) {\r\n            type = 'unique_id';\r\n        }\r\n\r\n        if (!unique_id_current_status.hasOwnProperty(type)) {\r\n            return false;\r\n        }\r\n\r\n        return get_unique_id_with_prefix(type, unique_id_current_status[type], type_as_prefix);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {string} [type] a type, do not require existed\r\n     * @param {number} [value]\r\n     * @returns {number|*}\r\n     */\r\n    Util.resetID = function (type, value) {\r\n        if (!arguments.length) {\r\n            type = 'unique_id';\r\n        }\r\n\r\n        type = String(type);\r\n\r\n        if (_.isUndefined(value)) {\r\n            delete unique_id_current_status[type];\r\n        } else {\r\n            value = arguments.length > 1 ? Util.beNumber(value) : 0;\r\n            value = Math.max(value, 0);\r\n            unique_id_current_status[type] = value;\r\n        }\r\n\r\n        return value;\r\n    };\r\n\r\n    function get_unique_id_with_prefix(type, id, type_as_prefix) {\r\n        if (type_as_prefix || _.isUndefined(type_as_prefix)) {\r\n            return type + '_' + id;\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get constructor name of object\r\n     * @param obj\r\n     * @param {boolean} [constructor_only = false] Return object's constructor name only\r\n     * @returns {string}\r\n     * @example\r\n     * Khoai.util.className(Khoai.App); //\"[object Object]\"\r\n     * Khoai.util.className(Khoai.App, true); //App\r\n     * Khoai.util.className(new Khoai.EventEmitter(), true); //EventEmitter\r\n     */\r\n    Util.className = function (obj, constructor_only) {\r\n        if (constructor_only) {\r\n            return obj.constructor.name;\r\n        }\r\n        return Object.prototype.toString.call(obj);\r\n    };\r\n\r\n    /**\r\n     * Get type of content. If is object then return constructor name\r\n     * @param content\r\n     * @returns {string}\r\n     * @example\r\n     * Khoai.util.contentType(123); //number\r\n     * Khoai.util.contentType('123'); //string\r\n     * Khoai.util.contentType('Yahooooooo'); //string\r\n     * Khoai.util.contentType(true); //boolean\r\n     * Khoai.util.contentType(true); //boolean\r\n     * Khoai.util.contentType([1,2]); //Array\r\n     * Khoai.util.contentType({}); //Object\r\n     * Khoai.util.contentType(_.App); //App\r\n     */\r\n    Util.contentType = function (content) {\r\n        var type = typeof content;\r\n\r\n        if (type === 'object') {\r\n            var class_name = Util.className(content, true);\r\n\r\n            if (class_name) {\r\n                return class_name;\r\n            }\r\n        }\r\n\r\n        return type;\r\n    };\r\n\r\n    /**\r\n     * Check object is an instance of a constructor type\r\n     * @param {*} obj\r\n     * @param {string} class_name Name of class\r\n     * @returns {boolean}\r\n     * @example\r\n     * Khoai.util.isInstanceOf(Khoai.App, 'App');//true\r\n     * Khoai.util.isInstanceOf(123, 'Object'); //false\r\n     * Khoai.util.isInstanceOf(123, 'Number'); //true\r\n     * Khoai.util.isInstanceOf('123', 'String'); //true\r\n     * Khoai.util.isInstanceOf(new Khoai.util.EventEmitter(), 'EventEmitter'); //true\r\n     */\r\n    Util.isInstanceOf = function (obj, class_name) {\r\n        return Util.className(obj, true) === class_name;\r\n    };\r\n\r\n    /**\r\n     * Check if object is primitive type: null, string, number, boolean\r\n     * @param value\r\n     * @returns {boolean}\r\n     * @example\r\n     * Khoai.util.isPrimitiveType(123); //true\r\n     * Khoai.util.isPrimitiveType('123'); //true\r\n     * Khoai.util.isPrimitiveType(null); //true\r\n     * Khoai.util.isPrimitiveType(); //true\r\n     * Khoai.util.isPrimitiveType(_.App); //false\r\n     */\r\n    Util.isPrimitiveType = function (value) {\r\n        if (_.isObject(value)) {\r\n            return false;\r\n        }\r\n\r\n        var type = typeof value;\r\n        return value == null || type === 'string' || type === 'number' || type === 'boolean';\r\n    };\r\n\r\n    Util.mergeObject = function () {\r\n        var next_index = 0;\r\n\r\n        for (var i = 0, length = arguments.length; i < length; i++) {\r\n            if (_.isArray(arguments[i]) || !_.isObject(arguments[i])) {\r\n                arguments[i] = _.castArray(arguments[i]);\r\n                arguments[i] = _.zipObject(_.range(next_index, next_index += arguments[i].length), arguments[i]);\r\n            }\r\n        }\r\n\r\n        return _.extend.apply(_, arguments);\r\n    };\r\n\r\n    function is_diff_strict_cb(value_1, value_2) {\r\n        return value_1 !== value_2;\r\n    }\r\n\r\n    function is_diff_loose_cb(value_1, value_2) {\r\n        return value_1 != value_2;\r\n    }\r\n\r\n    /**\r\n     * Get dirty of object with others object\r\n     * @param {function} cb Callback return true if 2 item is difference\r\n     * @param object\r\n     * @param [others...]\r\n     * @return {{}}\r\n     */\r\n    function diff_object(cb, object, others) {\r\n        if (arguments.length < 2) {\r\n            return {};\r\n        }\r\n\r\n        var result = {};\r\n\r\n        if (!_.isFunction(cb)) {\r\n            cb = cb ? is_diff_strict_cb : is_diff_loose_cb;\r\n        }\r\n\r\n        others = Util.mergeObject.apply(Util, slice.call(arguments, 2));\r\n\r\n        _.each(object, function (value, key) {\r\n            if (!others.hasOwnProperty(key)) {\r\n                result[key] = value;\r\n            } else {\r\n                if (cb(value, others[key])) {\r\n                    result[key] = value;\r\n                }\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get dirty of object with others object. Strict comparison\r\n     * @param {object} object\r\n     * @param {object} others\r\n     * @return {*}\r\n     * @example\r\n     * Khoai.util.diffObject({a: 0, b: 1}, {a: '0', b: 1}); //{a: 0}\r\n     */\r\n    Util.diffObject = function (object, others) {\r\n        var args = _.flatten(_.toArray(arguments));\r\n\r\n        args.unshift(is_diff_strict_cb);\r\n\r\n        return diff_object.apply(null, args);\r\n    };\r\n\r\n    /**\r\n     * Get dirty of object with others object. Loose comparison\r\n     * @param {object} object\r\n     * @param {object} others\r\n     * @return {*}\r\n     * @example\r\n     * Khoai.util.diffObjectLoose({a: 0, b: 1}, {a: '0', b: 2}); //{b: 1}\r\n     */\r\n    Util.diffObjectLoose = function (object, others) {\r\n        var args = _.flatten(_.toArray(arguments));\r\n\r\n        args.unshift(is_diff_loose_cb);\r\n\r\n        return diff_object.apply(null, args);\r\n    };\r\n\r\n    /**\r\n     * Get dirty of object with others object, use callback\r\n     * @param {function} callback Callback with 2 parameters: base value, other object value. Return true when difference\r\n     * @param {object} object\r\n     * @param {object} others\r\n     * @return {*}\r\n     */\r\n    Util.diffObjectWith = function (callback, object, others) {\r\n        return diff_object.apply(null, slice.apply(arguments))\r\n    };\r\n\r\n\r\n    /**\r\n     * Get random string\r\n     * @param {number} [length]\r\n     * @param {string} [chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ']\r\n     * @returns {string}\r\n     * @example\r\n     * Khoai.util.randomString(10); //'mYJeC1xBcl'\r\n     * Khoai.util.randomString(10, 'ABCDEF'); //'CDABBEFADE'\r\n     */\r\n    Util.randomString = function (length, chars) {\r\n        var result = '', chars_length, i;\r\n        if (_.isUndefined(chars) || !chars.toString().length) {\r\n            chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n        }\r\n        chars_length = chars.length;\r\n\r\n        length = Util.beNumber(length, 10);\r\n\r\n        for (i = length; i > 0; --i) {\r\n            result += chars[Math.round(Math.random() * (chars_length - 1))];\r\n        }\r\n        return result;\r\n    };\r\n\r\n\r\n    /**\r\n     * Setup a object with field name and value or object of fields\r\n     * @param {Object} object host object\r\n     * @param {(string|Object)} option field name of object of fields\r\n     * @param {*} value value of field when option param is field name\r\n     * @returns {{}}\r\n     * @example\r\n     * var obj = {a: 'A', b: 'B'}\r\n     * Khoai.util.setup(obj, 'a', '123'); //obj -> {a: '123', b: 'B'}\r\n     * Khoai.util.setup(obj, {b: 'Yahoo', c: 'ASD'}); //obj -> {a: 123, b: 'Yahoo', c: 'ASD'}\r\n     */\r\n    Util.setup = function (object, option, value) {\r\n        if (!_.isObject(object)) {\r\n            object = {};\r\n        }\r\n        if (_.isObject(option)) {\r\n            _.each(option, function (val, path) {\r\n                _.set(object, path, val);\r\n            });\r\n        } else {\r\n            _.set(object, option, value);\r\n        }\r\n\r\n        return object;\r\n    };\r\n\r\n    /**\r\n     * Get all of valid keys that exists in object.\r\n     *\r\n     * @param {object} object\r\n     * @param {Array} keys\r\n     * @return {Array}\r\n     */\r\n    Util.validKeys = function (object, keys) {\r\n        var result = [];\r\n\r\n        keys = _.castArray(keys);\r\n        for (var i = 0, length = keys.length; i < length; i++) {\r\n            if (object.hasOwnProperty(keys[i])) {\r\n                result.push(keys[i]);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n    /**\r\n     * Like _.pairs but array item is an object with field is \"key\", \"value\"\r\n     * @param {{}} object\r\n     * @param {string} [key = 'key']\r\n     * @param {string} [value = 'value']\r\n     * @returns {Array}\r\n     * @example\r\n     * Khoai.util.pairsAsObject({one: 1, two: 2, three: 3});\r\n     * => [{key: 'one', value: 1},{key: 'two', value: 2},{key: 'three', value: 3}]\r\n     */\r\n    Util.pairsAsObject = function (object, key, value) {\r\n        var result = [],\r\n            field_key = key || 'key',\r\n            field_value = value || 'value';\r\n\r\n        _.each(object, function (value, key) {\r\n            var item = {};\r\n\r\n            item[field_key] = key;\r\n            item[field_value] = value;\r\n\r\n            result.push(item);\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * A convenient version of what is perhaps the most common use-case for map: extracting a list of property values, with a column as key.\r\n     * @param {Array} collection\r\n     * @param {string} key_field If key field not found then use as \"undefined\"\r\n     * @param {string} value_field If value field not found then use as \"undefined\"\r\n     * @returns {{}}\r\n     * @example\r\n     * var stooges = [{name: 'moe', id: 1, age: 40}, {name: 'larry', id: 2, age: 50}, {name: 'curly', id: 4, age: 60}];\r\n     * Khoai.util.pluckBy(stooges, 'id', 'name');\r\n     * => {1: 'moe', 2: 'larry', 3: 'curly'}\r\n     */\r\n    Util.pluckBy = function (collection, key_field, value_field) {\r\n        var result = {};\r\n\r\n        _.each(collection, function (object) {\r\n            if (object.hasOwnProperty(key_field)) {\r\n                result[object[key_field]] = object.hasOwnProperty(value_field) ? object[value_field] : undefined;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Check value is numeric\r\n     * @param value\r\n     * @returns {boolean}\r\n     *\r\n     * @example\r\n     * Khoai.util.isNumeric(123); //true\r\n     * Khoai.util.isNumeric(123.5); //true\r\n     * Khoai.util.isNumeric('123.5'); //true\r\n     */\r\n    Util.isNumeric = function (value) {\r\n        return !_.isArray(value) && (value - parseFloat(value) + 1) >= 0;\r\n    };\r\n\r\n    /**\r\n     * Make sure value is in array\r\n     * @param {*} value\r\n     * @param {Array} values\r\n     * @param {*} [default_value] Default value if not found value in values\r\n     * @returns {*} If found then return value itself, else, return default_value or first item of array\r\n     * @example\r\n     * var items = [1,2,3,'a'];\r\n     * Khoai.util.oneOf(1, items); // 1\r\n     * Khoai.util.oneOf(0, items); // 1\r\n     * Khoai.util.oneOf('a', items); // 'a'\r\n     * Khoai.util.oneOf('b', items, 'C'); // 'C'\r\n     */\r\n    Util.oneOf = function (value, values, default_value) {\r\n        if (-1 !== values.indexOf(value)) {\r\n            return value;\r\n        }\r\n\r\n        if (arguments.length >= 3) {\r\n            return default_value;\r\n        }\r\n\r\n        return _.first(values);\r\n    };\r\n\r\n    /**\r\n     * Escape URL\r\n     * @param {string} url\r\n     * @param {boolean} [param = false] Include param?\r\n     * @returns {string}\r\n     */\r\n    Util.escapeURL = function (url, param) {\r\n        return param ? encodeURIComponent(url) : encodeURI(url);\r\n    };\r\n\r\n    /**\r\n     * Unescape URL\r\n     * @param {string} url\r\n     * @param {boolean} [param = false] Include param?\r\n     * @returns {string}\r\n     */\r\n    Util.unescapeURL = function (url, param) {\r\n        return param ? decodeURI(url) : decodeURIComponent(url);\r\n    };\r\n\r\n\r\n    /**\r\n     * Split array to n of chunks\r\n     * @param {Array} array\r\n     * @param {number} chunks Number of chunks\r\n     * @return {Array}\r\n     * @example\r\n     * var arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n     * Khoai.util.chunks(arr, 3)\r\n     * => [\r\n     *   [0, 1, 2, 3],\r\n     *   [4, 5, 6, 7],\r\n     *   [8, 9]\r\n     * ]\r\n     */\r\n    Util.chunks = function (array, chunks) {\r\n        return _.chunk(array, Math.ceil(array.length / chunks));\r\n    };\r\n\r\n    /**\r\n     * Toggle array's elements\r\n     * @param {Array} array\r\n     * @param {Array} elements\r\n     * @param {boolean} status If this param is boolean then add/remove base on it value. By default it is undefined -\r\n     *     add if none exists, remove if existed\r\n     * @returns {Array}\r\n     * @example\r\n     * var arr = ['A', 'B', 'C', 'D'];\r\n     * Khoai.util.toggle(arr, ['A', 'V']) => ['B', 'C', 'D', 'V']\r\n     * Khoai.util.toggle(arr, ['A', 'V'], true) => ['A', 'B', 'C', 'D', 'V']\r\n     * Khoai.util.toggle(arr, ['A', 'V'], false) => ['B', 'C', 'D']\r\n     */\r\n    Util.toggle = function (array, elements, status) {\r\n        elements = _.uniq(_.castArray(elements));\r\n        if (_.isUndefined(status)) {\r\n            var exclude = _.intersection(array, elements);\r\n            var include = _.difference(elements, array);\r\n\r\n            array = _.union(_.difference(array, exclude), include);\r\n        } else {\r\n            if (status) {\r\n                array = _.union(array, elements);\r\n            } else {\r\n                array = _.difference(array, elements);\r\n            }\r\n        }\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Create, define and return a object with properties. Object's properties are fixed and enumerable\r\n     * @param {{}} properties\r\n     * @returns {{}}\r\n     * @example\r\n     * var obj = Khoai.util.defineObject({name: 'Manh', old: 123, hello: function(){\r\n     *  alert('Hello ' + this.name);\r\n     * }});\r\n     *\r\n     * obj.old = 10;\r\n     * console.log(obj); //{name: 'Manh', old: 123}\r\n     * _.each(obj, function(value, key){\r\n     *  console.log(key, '=>', value);\r\n     * });\r\n     * //name => Manh\r\n     * //old => 123\r\n     */\r\n    Util.defineObject = function (properties) {\r\n        var obj = {};\r\n        _.each(properties, function (value, key) {\r\n            key = key.trim();\r\n            if (!_.has(obj, key)) {\r\n                Object.defineProperty(obj, key, {\r\n                    enumerable: !_.isFunction(value),\r\n                    value: value\r\n                });\r\n            }\r\n        });\r\n        return obj;\r\n    };\r\n\r\n    /**\r\n     * Define a MaDnh constant\r\n     * @param {object} target\r\n     * @param {(string|Object)} name\r\n     * @param {*} [value = undefined]\r\n     * @example\r\n     * Khoai.util.defineConstant(obj, 'TEST', 123) => obj.TEST = 123\r\n     */\r\n    Util.defineConstant = function (target, name, value) {\r\n        var obj = {};\r\n\r\n        if (_.isObject(name)) {\r\n            obj = name;\r\n            value = undefined;\r\n        } else {\r\n            obj[name] = value;\r\n        }\r\n        _.each(obj, function (val, key) {\r\n            key = key.trim().toUpperCase();\r\n\r\n            if (!target.hasOwnProperty(key)) {\r\n                Object.defineProperty(target, key, {\r\n                    enumerable: true,\r\n                    value: val\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Inherit constructor prototype\r\n     * @param {function} subclass_constructor Destination constructor\r\n     * @param {function} base_class_constructor Source constructor\r\n     * @param {boolean} [addSuper = true] Add property to destination prototype that reference back to source prototype\r\n     *\r\n     * @see https://github.com/Olical/Heir\r\n     *\r\n     * @example\r\n     * function MyEE(){\r\n     *  M.EventEmitter.call(this);\r\n     * }\r\n     *\r\n     * M.inherit(MyEE, M.EventEmitter);\r\n     */\r\n    Util.inherit = function (subclass_constructor, base_class_constructor, addSuper) {\r\n        var proto = subclass_constructor.prototype = Object.create(base_class_constructor.prototype);\r\n        proto.constructor = subclass_constructor;\r\n\r\n        if (addSuper || _.isUndefined(addSuper)) {\r\n            proto._super = base_class_constructor.prototype;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Call callback with arguments\r\n     * @param {string|function|Array} callback\r\n     * @param {*} [args] Callback arguments, if only one argument as array passed then it must be wrapped by array, eg:\r\n     *     [users]\r\n     * @param {Object|null} context context of \"this\" keyword\r\n     * @returns {*}\r\n     *\r\n     * @example\r\n     * Khoai.util.callFunc(null, alert, 123);\r\n     * Khoai.util.callFunc(null, function(name, old){\r\n     *      alert('My name is ' + name + ', ' + old + 'years old');\r\n     * }, ['Manh', 10]);\r\n     *\r\n     * var obj = {name: 'Manh', old: 10};\r\n     * Khoai.util.callFunc(obj, function(say_hi){\r\n     *      alert((say_hi ? 'Hi' : 'Hello') + '! my name is ' + this.name + ', ' + this.old + ' years old');\r\n     * }, true);\r\n     */\r\n    Util.callFunc = function (callback, args, context) {\r\n        if (arguments.length >= 2) {\r\n            args = _.castArray(args);\r\n        } else {\r\n            args = [];\r\n        }\r\n\r\n        if (callback) {\r\n            if (_.isFunction(callback)) {\r\n                return callback.apply(context || null, args);\r\n            } else if (_.isString(callback)) {\r\n                if (window.hasOwnProperty(callback) && _.isFunction(window[callback])) {\r\n                    return window[callback].apply(context || null, args);\r\n                }\r\n\r\n                throw new Error('Invalid callback!');\r\n            } else if (_.isArray(callback)) {\r\n                var result = [],\r\n                    this_func = arguments.callee;\r\n\r\n                _.each(callback, function (tmpFunc) {\r\n                    result.push(this_func(tmpFunc, args, context));\r\n                });\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     * Call callback asynchronous. Similar to Khoai.util.callFunc\r\n     *\r\n     * @param {(string|function|Array)} callback\r\n     * @param {*} [args] Callback arguments, if only one argument as array passed then it must be wrapped by array, eg:\r\n     *     [users]\r\n     * @param {number} [delay=1] Delay milliseconds\r\n     * @param {Object|null} context context of \"this\" keyword\r\n     * @see callFunc\r\n     */\r\n    Util.async = function (callback, args, delay, context) {\r\n        delay = parseInt(delay);\r\n        if (_.isNaN(delay)) {\r\n            delay = 1;\r\n        }\r\n\r\n        return setTimeout(function () {\r\n            Util.callFunc(callback, args, context || null);\r\n        }, Math.max(1, delay));\r\n    };\r\n\r\n    function createConsoleCB(name, description) {\r\n        return function () {\r\n            console[name].apply(console, (description ? [description] : []).concat(slice.apply(arguments)));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Like console.log with dynamic arguments\r\n     * @example\r\n     * var args = [1,2,3,4];\r\n     * Khoai.util.logArgs('a',123);\r\n     * Khoai.util.logArgs.apply(null, args);\r\n     */\r\n    Util.logArgs = function () {\r\n        console.log.apply(console, slice.apply(arguments));\r\n    };\r\n\r\n    /**\r\n     * Create console log callback with description as first arguments\r\n     * @param {string} description\r\n     * @returns {*}\r\n     * @example\r\n     * var cb = Khoai.util.logCb('Test 1');\r\n     * cb(1,2,3); // Console log: 'Test 1' 1 2 3\r\n     */\r\n    Util.logCb = function (description) {\r\n        return createConsoleCB.apply(null, ['log'].concat(slice.apply(arguments)));\r\n    };\r\n\r\n    /**\r\n     * Like console.warn with dynamic arguments\r\n     * @example\r\n     * var args = [1,2,3,4];\r\n     * Khoai.util.warnArgs('a',123);\r\n     * Khoai.util.warnArgs.apply(null, args);\r\n     */\r\n    Util.warnArgs = function () {\r\n        console.warn.apply(console, slice.apply(arguments));\r\n    };\r\n\r\n    /**\r\n     * Create console waring callback with description as first arguments\r\n     * @param {string} description\r\n     * @returns {*}\r\n     * @example\r\n     * var cb = Khoai.util.warnCb('Test 1');\r\n     * cb(1,2,3); // Console warn as: 'Test 1' 1 2 3\r\n     */\r\n    Util.warnCb = function (description) {\r\n        return createConsoleCB.apply(null, ['warn'].concat(slice.apply(arguments)));\r\n    };\r\n\r\n    /**\r\n     * Like console.error with dynamic arguments\r\n     * @example\r\n     * var args = [1,2,3,4];\r\n     * Khoai.util.errorArgs('a',123);\r\n     * Khoai.util.errorArgs.apply(null, args);\r\n     */\r\n    Util.errorArgs = function () {\r\n        console.error.apply(console, slice.apply(arguments));\r\n    };\r\n\r\n    /**\r\n     * Create console error callback with description as first arguments\r\n     * @param {string} description\r\n     * @returns {*}\r\n     * @example\r\n     * var cb = Khoai.util.errorCb('Test 1');\r\n     * cb(1,2,3); // Console error as: 'Test 1' 1 2 3\r\n     */\r\n    Util.errorCb = function (description) {\r\n        return createConsoleCB.apply(null, ['error'].concat(slice.apply(arguments)));\r\n    };\r\n\r\n\r\n    var debug_types_status = {},\r\n        all_debugging = false;\r\n\r\n    /**\r\n     *\r\n     * @param type\r\n     * @returns {boolean}\r\n     */\r\n    Util.isDebugging = function (type) {\r\n        if (all_debugging || _.isEmpty(type)) {\r\n            return all_debugging;\r\n        }\r\n\r\n        return debug_types_status.hasOwnProperty(type) && debug_types_status[type];\r\n\r\n    };\r\n    /**\r\n     *\r\n     * @param [type] default is all debug type\r\n     */\r\n    Util.debugging = function (type) {\r\n        if (_.isEmpty(type)) {\r\n            all_debugging = true;\r\n            return;\r\n        }\r\n\r\n        debug_types_status[type] = true;\r\n    };\r\n    /**\r\n     *\r\n     * @param [type] default is all debug type\r\n     */\r\n    Util.debugComplete = function (type) {\r\n        if (_.isEmpty(type)) {\r\n            all_debugging = false;\r\n            debug_types_status = {};\r\n\r\n            return;\r\n        }\r\n\r\n        delete debug_types_status[type];\r\n    };\r\n\r\n    /**\r\n     * Run callback if is in debugging of a type\r\n     * @param type null - all debug type\r\n     * @param {function} callback\r\n     */\r\n    Util.onDebugging = function (type, callback) {\r\n        if (Util.isDebugging(type)) {\r\n            Util.callFunc(callback);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get json string of an array\r\n     * @param {array} details\r\n     * @param {string} [glue=\"\\n\"]\r\n     * @returns {string}\r\n     */\r\n    Util.getDebugString = function (details, glue) {\r\n        var result = [];\r\n\r\n        _.each(_.castArray(details), function (item) {\r\n            result.push(JSON.stringify(item));\r\n        });\r\n\r\n        return result.join(glue || \"\\n\");\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param args\r\n     * @param order\r\n     * @param rules\r\n     * @returns {{}}\r\n     * @example\r\n     * var order = ['int', 'bool', 'str'],\r\n     * rules = {int: 'number', bool: 'boolean', str: 'string'};\r\n     *\r\n     * Khoai.util.optionalArgs([1, true, 'A'], order, rules); //{int: 1, bool: true, str: \"A\"}\r\n     * Khoai.util.optionalArgs([true, 'A'], order, rules);//{bool: true, str: \"A\"}\r\n     * Khoai.util.optionalArgs(['A'], order, rules); //{str: \"A\"}\r\n     * Khoai.util.optionalArgs(['A', 'V'], order, rules); //{int: \"A\", bool: \"V\"}\r\n     * Khoai.util.optionalArgs([1, []], order, rules); //{int: 1, bool: []}\r\n     * Khoai.util.optionalArgs([true, []], order, rules); //{int: true, bool: []}\r\n     * Khoai.util.optionalArgs(['A', []], order, rules); //{int: \"A\", bool: []}\r\n     * Khoai.util.optionalArgs([[], []], order, rules); //{int: Array[0], bool: []}\r\n     *\r\n     * Khoai.util.optionalArgs(['A', 'V'], ['int', 'bool', 'str', 'str2'], {int: 'number', bool: 'boolean', str: 'string', str2: 'string'});\r\n     * //=> {str: \"A\", str2: \"V\"}\r\n     */\r\n    Util.optionalArgs = function (args, order, rules) {\r\n        var result = {},\r\n            arg, index = 0, last_index, missing_rules, type, args_cloned, args_with_type, found;\r\n\r\n        missing_rules = _.difference(order, Object.keys(rules));\r\n        missing_rules.forEach(function (missing) {\r\n            rules[missing] = true;\r\n        });\r\n\r\n        args_with_type = order.map(function (arg_name) {\r\n            return rules[arg_name];\r\n        });\r\n\r\n        if (_.isEmpty(args)) {\r\n            return result;\r\n        }\r\n        if (args.length >= order.length) {\r\n            result = _.zipObject(order, args.slice(0, order.length));\r\n        } else {\r\n            args_cloned = args.slice(0);\r\n\r\n            while (arg = args_cloned.shift()) {\r\n                type = Util.contentType(arg);\r\n                found = false;\r\n                last_index = index;\r\n\r\n                Util.loop(args_with_type.slice(index), (function (tmp_arg, tmp_type) {\r\n                    return function (types) {\r\n                        if (types === true || tmp_type === types\r\n                            || (_.isArray(types) && -1 != types.indexOf(tmp_type))\r\n                            || (_.isFunction(types) && types(tmp_arg))) {\r\n                            found = true;\r\n\r\n                            return 'break';\r\n                        }\r\n\r\n                        index++;\r\n                    }\r\n                })(arg, type));\r\n\r\n                if (!found) {\r\n                    result = _.zipObject(order.slice(0, args.length), args);\r\n                    break;\r\n                }\r\n\r\n                result[order[index++]] = arg;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Sort number asc\r\n     */\r\n    function sortNumberCallback(a, b) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * Sort number desc\r\n     */\r\n    function sortNumberDescCallback(a, b) {\r\n        return b - a;\r\n    }\r\n\r\n    function is_equal_strict(a, b) {\r\n        return a === b;\r\n    }\r\n\r\n    function is_equal_loose(a, b) {\r\n        return a == b;\r\n    }\r\n\r\n\r\n    Util.defineConstant(Util, {\r\n        /**\r\n         * Array sort compare function. Sort number\r\n         * @constant\r\n         * @example\r\n         * var scores = [1, 10, 2, 21];\r\n         * scores.sort(); // [1, 10, 2, 21]\r\n         * scores.sort(Khoai.util.SORT_NUMBER); // [1, 2, 10, 21]\r\n         */\r\n        SORT_NUMBER: sortNumberCallback,\r\n        /**\r\n         * Array sort compare function. Sort number desc\r\n         * @constant\r\n         * @example\r\n         * var scores = [1, 10, 2, 21];\r\n         * scores.sort(Khoai.util.SORT_NUMBER_DESC); // [21, 10, 2, 1]\r\n         */\r\n        SORT_NUMBER_DESC: sortNumberDescCallback\r\n    });\r\n\r\n\r\n    Khoai.util = Util;\r\n}));\r\n//# sourceMappingURL=khoai.js.map\r\n"]}